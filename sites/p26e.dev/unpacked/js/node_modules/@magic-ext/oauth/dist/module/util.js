var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createCryptoChallenge } from './crypto';
import { OAuthPayloadMethods, } from './index';
var OAUTH_REDIRECT_METADATA_KEY = 'oauth_redirect_metadata';
export function createURI(configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var provider, redirectURI, scope, loginHint, _a, verifier, challenge, state, storedData, query;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: 
                // Bust any old, in-progress OAuth flows.
                return [4 /*yield*/, this.utils.storage.removeItem(OAUTH_REDIRECT_METADATA_KEY)];
                case 1:
                    // Bust any old, in-progress OAuth flows.
                    _b.sent();
                    provider = configuration.provider, redirectURI = configuration.redirectURI, scope = configuration.scope, loginHint = configuration.loginHint;
                    return [4 /*yield*/, createCryptoChallenge()];
                case 2:
                    _a = _b.sent(), verifier = _a.verifier, challenge = _a.challenge, state = _a.state;
                    storedData = JSON.stringify({
                        verifier: verifier,
                        state: state,
                    });
                    return [4 /*yield*/, this.utils.storage.setItem(OAUTH_REDIRECT_METADATA_KEY, storedData)];
                case 3:
                    _b.sent();
                    query = [
                        "magic_api_key=" + encodeURIComponent(this.sdk.apiKey),
                        "magic_challenge=" + encodeURIComponent(challenge),
                        "state=" + encodeURIComponent(state),
                        "platform=" + encodeURIComponent('web'),
                        scope && "scope=" + encodeURIComponent(scope.join(' ')),
                        redirectURI && "redirect_uri=" + encodeURIComponent(redirectURI),
                        loginHint && "login_hint=" + encodeURIComponent(loginHint),
                    ].reduce(function (prev, next) { return (next ? prev + "&" + next : prev); });
                    return [2 /*return*/, {
                            query: query,
                            provider: provider,
                            redirectURI: redirectURI,
                        }];
            }
        });
    });
}
export function getResult(queryString) {
    var _this = this;
    return this.utils.createPromiEvent(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var json, _a, verifier, state, parseRedirectResult, resultOrError, maybeResult, maybeError;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, this.utils.storage.getItem(OAUTH_REDIRECT_METADATA_KEY)];
                case 1:
                    json = _c.sent();
                    _a = JSON.parse(json), verifier = _a.verifier, state = _a.state;
                    // Remove the save OAuth state from storage, it stays in memory now...
                    this.utils.storage.removeItem(OAUTH_REDIRECT_METADATA_KEY);
                    parseRedirectResult = this.utils.createJsonRpcRequestPayload(OAuthPayloadMethods.ParseRedirectResult, [
                        queryString,
                        verifier,
                        state,
                    ]);
                    return [4 /*yield*/, this.request(parseRedirectResult)];
                case 2:
                    resultOrError = _c.sent();
                    maybeResult = resultOrError;
                    maybeError = resultOrError;
                    if (maybeError.error) {
                        reject(this.createError(maybeError.error, (_b = maybeError.error_description) !== null && _b !== void 0 ? _b : 'An error occurred.', {
                            errorURI: maybeError.error_uri,
                            provider: maybeError.provider,
                        }));
                    }
                    resolve(maybeResult);
                    return [2 /*return*/];
            }
        });
    }); });
}
//# sourceMappingURL=util.js.map