var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import sha256Fallback from 'crypto-js/sha256';
import Base64 from 'crypto-js/enc-base64';
var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
var HAS_CRYPTO = typeof window !== 'undefined' && !!window.crypto;
var HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!window.crypto.subtle;
/**
 * Stringifies `bytes` using the OAuth 2.0 `code_verifier` character set.
 */
function bytesToVerifierString(bytes) {
    return Array.from(bytes)
        .map(function (value) { return CHARSET[value % CHARSET.length]; })
        .join('');
}
function base64URLEncodeFromByteArray(arg) {
    var makeURLSafe = function (base64) {
        return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    };
    if (arg instanceof ArrayBuffer) {
        var bytes = new Uint8Array(arg);
        var utf8Binary = Array.from(bytes)
            .map(function (value) { return String.fromCharCode(value); })
            .join('');
        var base64 = btoa(utf8Binary);
        return makeURLSafe(base64);
    }
    return makeURLSafe(Base64.stringify(arg));
}
/**
 * Produces a SHA-256 hash of the given `message`. This function first attempts
 * to use the browser's built-in `SubtleCrypto` API, falling back to
 * CryptoJS if required.
 */
function sha256(message) {
    return __awaiter(this, void 0, void 0, function () {
        var bytes;
        return __generator(this, function (_a) {
            if (HAS_SUBTLE_CRYPTO) {
                bytes = new TextEncoder().encode(message);
                return [2 /*return*/, crypto.subtle.digest('SHA-256', bytes).then(base64URLEncodeFromByteArray)];
            }
            return [2 /*return*/, base64URLEncodeFromByteArray(sha256Fallback(message))];
        });
    });
}
/**
 * Creates a cryptographically random string using the browser's built-in
 * `Crypto` API, falling back to `Math.random` if required.
 */
function createRandomString(size) {
    var bytes = new Uint8Array(size);
    if (HAS_CRYPTO) {
        window.crypto.getRandomValues(bytes);
    }
    else {
        for (var i = 0; i < size; i += 1)
            bytes[i] = Math.floor(Math.random() * Math.floor(255));
    }
    return bytesToVerifierString(bytes);
}
/**
 * Creates OAuth 2.0-compatible `code_verifier`, `code_challenge`, and `state`
 * parameters.
 */
export function createCryptoChallenge() {
    return __awaiter(this, void 0, void 0, function () {
        var state, verifier, challenge;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    state = createRandomString(128);
                    verifier = createRandomString(128);
                    return [4 /*yield*/, sha256(verifier)];
                case 1:
                    challenge = _a.sent();
                    return [2 /*return*/, { verifier: verifier, challenge: challenge, state: state }];
            }
        });
    });
}
//# sourceMappingURL=crypto.js.map